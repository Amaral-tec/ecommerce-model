package br.com.amaral;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Profile;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.amaral.model.Product;
import br.com.amaral.model.ProductBrand;
import br.com.amaral.model.ProductCategory;
import br.com.amaral.model.ProductImage;
import br.com.amaral.model.LegalEntity;
import br.com.amaral.repository.IProductRepository;
import br.com.amaral.repository.ILegalEntityRepository;
import br.com.amaral.repository.IProductBrandRepository;
import br.com.amaral.repository.IProductCategoryRepository;
import br.com.amaral.repository.IProductImageRepository;
import br.com.amaral.service.RandomEntityGenerator;
import junit.framework.TestCase;

@Profile("test")
@SpringBootTest
class ProductImageTests extends TestCase {

	@Autowired
	private IProductImageRepository entityRepository;

	@Autowired
	private IProductBrandRepository productBrandRepository;

	@Autowired
	private IProductCategoryRepository productCategoryRepository;

	@Autowired
	private IProductRepository productRepository;

	@Autowired
	private ILegalEntityRepository legalEntityRepository;

	@Autowired
	private WebApplicationContext wac;

	@Test
	void testRestApiSave() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();

		ObjectMapper objectMapper = new ObjectMapper();

		ResultActions returnApi = mockMvc.perform(
				MockMvcRequestBuilders.post("/create-product-image").content(objectMapper.writeValueAsString(entity))
						.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON));

		System.out.println("API Response: " + returnApi.andReturn().getResponse().getContentAsString());

		ProductImage returnEntity = objectMapper.readValue(returnApi.andReturn().getResponse().getContentAsString(),
				ProductImage.class);

		assertEquals(entity.getOriginalImage(), returnEntity.getOriginalImage());

		deleteMockEntity(returnEntity);
	}

	@Test
	void testRestApiDelete() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();
		entityRepository.save(entity);

		ObjectMapper objectMapper = new ObjectMapper();

		ResultActions returnApi = mockMvc.perform(
				MockMvcRequestBuilders.post("/delete-product-image").content(objectMapper.writeValueAsString(entity))
						.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON));

		System.out.println("API Response: " + returnApi.andReturn().getResponse().getContentAsString());
		System.out.println("API Status: " + returnApi.andReturn().getResponse().getStatus());

		assertEquals("OK: Deletion completed successfully.", returnApi.andReturn().getResponse().getContentAsString());
		assertEquals(200, returnApi.andReturn().getResponse().getStatus());

		deleteMockEntity(entity);
	}

	@Test
	void testRestApiDeleteById() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();
		entityRepository.save(entity);

		ObjectMapper objectMapper = new ObjectMapper();

		ResultActions returnApi = mockMvc
				.perform(MockMvcRequestBuilders.delete("/delete-product-image-by-id/" + entity.getId())
						.content(objectMapper.writeValueAsString(entity)).accept(MediaType.APPLICATION_JSON)
						.contentType(MediaType.APPLICATION_JSON));

		System.out.println("API Response: " + returnApi.andReturn().getResponse().getContentAsString());
		System.out.println("API Status: " + returnApi.andReturn().getResponse().getStatus());

		assertEquals("OK: Deletion completed successfully.", returnApi.andReturn().getResponse().getContentAsString());
		assertEquals(200, returnApi.andReturn().getResponse().getStatus());

		deleteMockEntity(entity);
	}
	
	@Test
	void testRestApiDeleteByPackage() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();
		entityRepository.save(entity);

		ObjectMapper objectMapper = new ObjectMapper();

		ResultActions returnApi = mockMvc
				.perform(MockMvcRequestBuilders.delete("/delete-product-image-package/" + entity.getProduct().getId())
						.content(objectMapper.writeValueAsString(entity)).accept(MediaType.APPLICATION_JSON)
						.contentType(MediaType.APPLICATION_JSON));

		System.out.println("API Response: " + returnApi.andReturn().getResponse().getContentAsString());
		System.out.println("API Status: " + returnApi.andReturn().getResponse().getStatus());

		assertEquals("OK: Deletion completed successfully.", returnApi.andReturn().getResponse().getContentAsString());
		assertEquals(200, returnApi.andReturn().getResponse().getStatus());

		deleteMockEntity(entity);
	}

	@Test
	void testRestApiGetById() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();
		entityRepository.save(entity);

		ObjectMapper objectMapper = new ObjectMapper();

		ResultActions returnApi = mockMvc.perform(MockMvcRequestBuilders.get("/get-product-image/" + entity.getId())
				.content(objectMapper.writeValueAsString(entity)).accept(MediaType.APPLICATION_JSON)
				.contentType(MediaType.APPLICATION_JSON));

		assertEquals(200, returnApi.andReturn().getResponse().getStatus());

		ProductImage returnEntity = objectMapper.readValue(returnApi.andReturn().getResponse().getContentAsString(),
				ProductImage.class);

		assertEquals(entity.getId(), returnEntity.getId());

		deleteMockEntity(entity);
	}

	@Test
	void testRestApiFindAll() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();
		entityRepository.save(entity);

		ResultActions returnApi = mockMvc.perform(MockMvcRequestBuilders.get("/find-all-product-image")
				.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON));

		assertEquals(200, returnApi.andReturn().getResponse().getStatus());

		deleteMockEntity(entity);
	}

	@Test
	void testRestApiGetByProduct() throws JsonProcessingException, Exception {

		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);
		MockMvc mockMvc = builder.build();

		ProductImage entity = createMockEntity();
		entityRepository.save(entity);

		ObjectMapper objectMapper = new ObjectMapper();

		ResultActions returnApi = mockMvc
				.perform(MockMvcRequestBuilders.get("/find-product-image-by-product/" + entity.getProduct().getId())
						.content(objectMapper.writeValueAsString(entity)).accept(MediaType.APPLICATION_JSON)
						.contentType(MediaType.APPLICATION_JSON));

		assertEquals(200, returnApi.andReturn().getResponse().getStatus());

		deleteMockEntity(entity);
	}

	private ProductImage createMockEntity() {

		LegalEntity legalEntity = RandomEntityGenerator.generateLegalEntity();
		legalEntityRepository.save(legalEntity);

		ProductBrand productBrand = RandomEntityGenerator.createProductBrand();
		productBrand.setLegalEntity(legalEntity);
		productBrandRepository.save(productBrand);

		ProductCategory productCategory = RandomEntityGenerator.createProductCategory();
		productCategory.setLegalEntity(legalEntity);
		productCategoryRepository.save(productCategory);

		Product product = RandomEntityGenerator.createProduct();
		product.setLegalEntity(legalEntity);
		product.setProductCategory(productCategory);
		product.setProductBrand(productBrand);
		productRepository.save(product);

		ProductImage entity = RandomEntityGenerator.createProductImage();
		entity.setThumbnailImage("");
		entity.setLegalEntity(legalEntity);
		entity.setProduct(product);

		return entity;
	}

	private void deleteMockEntity(ProductImage entity) {

		entityRepository.deleteById(entity.getId());
		productRepository.deleteById(entity.getProduct().getId());
		productCategoryRepository.deleteById(entity.getProduct().getProductCategory().getId());
		productBrandRepository.deleteById(entity.getProduct().getProductBrand().getId());
		legalEntityRepository.deleteById(entity.getLegalEntity().getId());

	}
}
